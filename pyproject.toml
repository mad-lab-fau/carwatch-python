[tool.poetry]
name = "carwatch"
version = "0.3.0"
description = "A Python package for the CARWatch framework to improve cortisol awakening response sampling."
authors = [
    "Annika Muecke <annika.muecke@fau.de>",
    "Robert Richer <robert.richer@fau.de>",
    "Arne KÃ¼derle <arne.kuederle@fau.de>",
    "Luca Abel <luca.abel@fau.de>"
]
license = "MIT"
homepage = "https://github.com/mad-lab-fau/carwatch"
repository = "https://github.com/mad-lab-fau/carwatch"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8, <3.11"
jupyterlab = "^3.4.5"
python-barcode = "^0.14.0"
CairoSVG = "^2.5.2"
click = "^8.1.3"
pandas = "^1.5.0"
qrcode = "^7.3.1"
matplotlib = { version = "^3.5.0", optional = true }
seaborn = { version = "^0.11.2", optional = true }
ipywidgets = {version = "^8", optional = true}
ipympl = {version = "^0.9", optional = true}
fau_colors = {version = "^1.6.0", optional=true}
trogon = "^0.4.0"

[tool.poetry.extras]
plotting = ["matplotlib", "seaborn", "ipywidgets", "ipympl", "fau_colors"]

[tool.poetry.dev-dependencies]
black = "^22.6.0"
poethepoet = "^0.16.0"
pytest = "^7.1.2"
pytest-cov = "^4.0.0"
ruff = "^0.0.261"
ipykernel = "^6.15.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py38']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''


[tool.poe.tasks]
_format_black = "black ."
_format_ruff = "ruff . --fix-only"
format = { sequence = ["_format_black", "_format_ruff"], help = "Format all files." }
lint = { cmd = "ruff carwatch --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff carwatch --format=github"
_check_black = "black . --check"
ci_check = { sequence = ["_check_black", "_lint_ci"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=carwatch -cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
update_version = { script = "_tasks:task_update_version()" }
register_ipykernel = { cmd = "python -m ipykernel install --user --name carwatch --display-name carwatch", help = "Add a new jupyter kernel for the project." }
remove_ipykernel = { cmd = "jupyter kernelspec uninstall carwatch", help = "Remove the project specific jupyter kernel."}


[tool.poetry.scripts]
prepare_study = 'carwatch.scripts.prepare_study:run'
