[tool.poetry]
name = "carwatch"
version = "0.1.1"
description = "A Python package for the CARWatch framework to improve cortisol awakening response sampling."
authors = [
    "Annika Muecke <annika.muecke@fau.de>",
    "Robert Richer <robert.richer@fau.de>",
    "Arne KÃ¼derle <arne.kuederle@fau.de>",
    "Luca Abel <luca.abel@fau.de>"
]
license = "MIT"
homepage = "https://github.com/mad-lab-fau/carwatch"
repository = "https://github.com/mad-lab-fau/carwatch"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8, <3.11"
jupyterlab = "^3.4.5"
python-barcode = "^0.14.0"
CairoSVG = "^2.5.2"
click = "^8.1.3"
pandas = "^1.5.0"
qrcode = "^7.3.1"

[tool.poetry.dev-dependencies]
black = "^22.6.0"
poethepoet = "^0.16.0"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
ruff = "^0.0.261"
ipykernel = "^6.15.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''

[tool.ruff]
line-length = 120
update-check = true
target-version = "py38"

select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # mccabe
    "C90",
    # isort
    "I",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # pep8-naming
    "N",
    # flake8-blind-except
    "BLE",
    # flake8-2020
    "YTT",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-errmsg
    "EM",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # flake8-bugbear
    "B",
    # flake8-quotes
    "Q",
    # pylint
    "PL",
    # flake8-pie
    "PIE",
    # flake8-type-checking
    "TCH",
    # tryceratops
    "TRY",
    # flake8-use-pathlib
    "PTH",
    "RUF"
]

ignore = [
    # controversial
    "B006",
    # controversial
    "B008",
    "B010",
    # Magic constants
    "PLR2004",
    # Strings in error messages
    "EM101",
    "EM102",
    "EM103",
    # Multiline docstring summary
    "D213",
    # Varaibles before return
    "RET504",
    # Abstract raise into inner function
    "TRY301",
    # Use type-checking block
    "TCH001",
    "TCH002",
    "TCH003",
    # df as varaible name
    "PD901",
    # melt over stack
    "PD013"
]


exclude = [
    "doc/sphinxext/*.py",
    "doc/build/*.py",
    "doc/temp/*.py",
    ".eggs/*.py",
    "example_data",
    "examples"
]


[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


[tool.poe.tasks]
_format_black = "black ."
_format_ruff = "ruff . --fix-only"
format = { sequence = ["_format_black", "_format_ruff"], help = "Format all files." }
lint = { cmd = "ruff carwatch --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff carwatch --format=github"
_check_black = "black . --check"
ci_check = { sequence = ["_check_black", "_lint_ci"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=carwatch --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
update_version = { script = "_tasks:task_update_version()" }
register_ipykernel = { cmd = "python -m ipykernel install --user --name carwatch --display-name carwatch", help = "Add a new jupyter kernel for the project." }
remove_ipykernel = { cmd = "jupyter kernelspec uninstall carwatch", help = "Remove the project specific jupyter kernel."}
